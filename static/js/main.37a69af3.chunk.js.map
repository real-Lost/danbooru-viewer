{"version":3,"sources":["components/ImageItem.js","components/ListView.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["ImageItem","_this$props","this","props","imgUrl","posts","currentIndex","react_default","a","createElement","className","src","Component","ListView","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","postsToCards","bind","assertThisInitialized","imageClick","e","console","log","currentTarget","changeToViewer","id","_this2","map","post","i","key","onClick","large_file_url","Controls","prevImage","nextImage","App","state","listView","currentPage","distanceFromBottom","handleScroll","loadData","testImage","window","addEventListener","Mousetrap","setState","_this3","unbind","document","documentElement","scrollHeight","scrollTop","_this4","axios","get","concat","then","res","data","forEach","_this5","tester","Image","onload","toConsumableArray","onerror","prevState","length","ListView_ListView","ImageItem_ImageItem","Controls_Controls","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37a69af3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './ImageItem.css';\r\nexport default class ImageItem extends Component {\r\n  render() {\r\n    const {posts, imgUrl, currentIndex} = this.props;\r\n    return (\r\n      <div className='image-item card'>\r\n        <div className=\"image-container\">\r\n          <img src={imgUrl} className=\"card-img-top\" />\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <p className=\"card-text\">more info here</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './ListView.css';\r\n\r\nexport default class ListView extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.postsToCards = this.postsToCards.bind(this);\r\n        this.imageClick = this.imageClick.bind(this);\r\n    }\r\n\r\n    imageClick(e){\r\n        console.log(e.currentTarget);\r\n        this.props.changeToViewer(e.currentTarget.id);\r\n    }\r\n\r\n    postsToCards() {\r\n        return this.props.posts.map((post, i)=>{\r\n            return (\r\n            <li key={i+1} className='image-container' onClick={this.imageClick} id={i+1}>\r\n                <img className=\"card-img-top\" src={post.large_file_url}/>\r\n            </li>)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {posts} = this.props;\r\n        return (<ul className=\"container\">\r\n            {this.postsToCards()}\r\n        </ul>);\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Controls.css';\r\n\r\nexport default class Controls extends Component {\r\n    render() {\r\n        const {prevImage,nextImage} = this.props;\r\n        return (<div className=\"controls\">\r\n            <button onClick={prevImage}>Prev</button>\r\n            <button onClick={nextImage}>Next</button>\r\n        </div>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Mousetrap from 'mousetrap';\nimport './App.css';\nimport ImageItem from './components/ImageItem';\nimport ListView from './components/ListView';\nimport Controls from './components/Controls';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentIndex: 0,\n      listView: true,\n      posts: [],\n      currentPage: 0,\n      distanceFromBottom: 99999,\n    }\n\n    this.nextImage = this.nextImage.bind(this);\n    this.prevImage = this.prevImage.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.changeToViewer = this.changeToViewer.bind(this);\n    this.loadData = this.loadData.bind(this);\n    this.testImage = this.testImage.bind(this);\n  }\n\n  componentDidMount(){\n    this.loadData();\n\n    window.addEventListener('scroll', this.handleScroll);\n    Mousetrap.bind(['a'], this.prevImage);\n    Mousetrap.bind(['d'], this.nextImage);\n    Mousetrap.bind(['esc'], ()=> this.setState(state=> {return {listView:true}}));\n  }\n\n  componentWillUnmount(){\n    Mousetrap.unbind(['a'], this.prevImage);\n    Mousetrap.unbind(['d'], this.nextImage);\n    Mousetrap.unbind(['esc'], ()=> this.setState(state=> {return {listView:true}}));\n\n  }\n\n  handleScroll(e) {\n    const distanceFromBottom = (document.documentElement.scrollHeight - document.documentElement.scrollTop)*1;\n    if(distanceFromBottom < 2000 && this.state.listView){\n      this.loadData();\n    }\n  }\n\n  loadData(){\n    this.state.currentPage++;\n    axios.get(`https://danbooru.donmai.us/posts.json?page=${this.state.currentPage}`)\n    .then(res => {\n      res.data.forEach(post=>{\n        this.testImage(post);\n      });\n    });\n  }\n\n  testImage(post) {\n    var tester=new Image();\n    tester.onload= ()=>{\n      this.setState((state, props) => { return { posts:[...state.posts,post] }});\n    };\n    tester.onerror= ()=>{}\n    tester.src=post.large_file_url;\n  }\n\n\n\n  changeToViewer(id){\n    this.setState((prevState, props) => {\n      return {\n        currentIndex: id-1,\n        listView: false,\n      };\n    });\n  }\n  nextImage(){\n    if(this.state.currentIndex == this.state.posts.length-1){\n      //TODO add an indication to the user that more data is beying loaded\n      //load more data\n      this.loadData();\n    }else{\n      this.setState((prevState, props) => {\n        return {currentIndex: ++prevState.currentIndex,};\n      });\n    }\n  }\n  prevImage(){\n    if(this.state.currentIndex == 0){\n      //toast saying that there ar no more items\n      console.log('cant go any further');\n    }else{\n      this.setState((prevState, props) => {\n        return {currentIndex: --prevState.currentIndex,};\n      });\n    }\n  }\n\n  render() {\n    if(!this.state.listView){\n      return (\n          <div>\n            <ImageItem\n              imgUrl={this.state.posts[this.state.currentIndex].large_file_url}/>\n            <Controls prevImage={this.prevImage} nextImage={this.nextImage}/>\n            <button onClick={this.loadData}>More</button>\n          </div> \n      );\n    }\n\n    return (<div>\n      <button onClick={this.loadData}>More</button>\n      <ListView \n        posts={this.state.posts}\n        changeToViewer={this.changeToViewer} />\n    </div>);\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}